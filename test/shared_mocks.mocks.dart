// Mocks generated by Mockito 5.0.5 from annotations
// in lectary/test/unitTests/abstract_test.dart.
// Do not manually edit this file.

import 'dart:async' as i5;
import 'dart:io' as i3;

import 'package:lectary/data/db/entities/abstract.dart' as i8;
import 'package:lectary/data/db/entities/coding.dart' as i9;
import 'package:lectary/data/db/entities/lecture.dart' as i6;
import 'package:lectary/data/db/entities/vocable.dart' as i7;
import 'package:lectary/data/repositories/lecture_repository.dart' as i4;
import 'package:lectary/models/lectary_overview.dart' as i2;
import 'package:mockito/mockito.dart' as i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeLectaryData extends i1.Fake implements i2.LectaryData {}

class _FakeFile extends i1.Fake implements i3.File {}

/// A class which mocks [LectureRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLectureRepository extends i1.Mock implements i4.LectureRepository {
  MockLectureRepository() {
    i1.throwOnMissingStub(this);
  }

  @override
  i5.Future<i2.LectaryData> loadLectaryData() =>
      (super.noSuchMethod(Invocation.method(#loadLectaryData, []),
          returnValue: Future<i2.LectaryData>.value(_FakeLectaryData()))
      as i5.Future<i2.LectaryData>);
  @override
  i5.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<i3.File> downloadLecture(i6.Lecture? lecture) =>
      (super.noSuchMethod(Invocation.method(#downloadLecture, [lecture]),
          returnValue: Future<i3.File>.value(_FakeFile()))
      as i5.Future<i3.File>);
  @override
  i5.Stream<List<i6.Lecture>> watchAllLectures() =>
      (super.noSuchMethod(Invocation.method(#watchAllLectures, []),
          returnValue: const Stream<List<i6.Lecture>>.empty())
      as i5.Stream<List<i6.Lecture>>);
  @override
  i5.Future<List<i6.Lecture>> loadLecturesLocal() =>
      (super.noSuchMethod(Invocation.method(#loadLecturesLocal, []),
          returnValue: Future<List<i6.Lecture>>.value(<i6.Lecture>[]))
      as i5.Future<List<i6.Lecture>>);
  @override
  i5.Future<List<i6.Lecture>> findAllLecturesWithLang(String? langMedia) =>
      (super.noSuchMethod(
          Invocation.method(#findAllLecturesWithLang, [langMedia]),
          returnValue: Future<List<i6.Lecture>>.value(<i6.Lecture>[]))
      as i5.Future<List<i6.Lecture>>);
  @override
  i5.Future<int> insertLecture(i6.Lecture? lecture) =>
      (super.noSuchMethod(Invocation.method(#insertLecture, [lecture]),
          returnValue: Future<int>.value(0)) as i5.Future<int>);
  @override
  i5.Future<void> updateLecture(i6.Lecture? lecture) =>
      (super.noSuchMethod(Invocation.method(#updateLecture, [lecture]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteLecture(i6.Lecture? lecture) =>
      (super.noSuchMethod(Invocation.method(#deleteLecture, [lecture]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAllLectures() =>
      (super.noSuchMethod(Invocation.method(#deleteAllLectures, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<List<i7.Vocable>> findVocablesByLangMedia(String? langMedia) =>
      (super.noSuchMethod(
          Invocation.method(#findVocablesByLangMedia, [langMedia]),
          returnValue: Future<List<i7.Vocable>>.value(<i7.Vocable>[]))
      as i5.Future<List<i7.Vocable>>);
  @override
  i5.Future<List<i7.Vocable>> findVocablesByLectureIdAndLangMedia(
      int? lectureId, String? langMedia) =>
      (super.noSuchMethod(
          Invocation.method(
              #findVocablesByLectureIdAndLangMedia, [lectureId, langMedia]),
          returnValue: Future<List<i7.Vocable>>.value(<i7.Vocable>[]))
      as i5.Future<List<i7.Vocable>>);
  @override
  i5.Future<List<i7.Vocable>> findVocablesByLecturePackAndLangMedia(
      String? lecturePack, String? langMedia) =>
      (super.noSuchMethod(
          Invocation.method(#findVocablesByLecturePackAndLangMedia,
              [lecturePack, langMedia]),
          returnValue: Future<List<i7.Vocable>>.value(<i7.Vocable>[]))
      as i5.Future<List<i7.Vocable>>);
  @override
  i5.Future<List<i7.Vocable>> findVocablesByLectureId(int? lectureId) =>
      (super.noSuchMethod(
          Invocation.method(#findVocablesByLectureId, [lectureId]),
          returnValue: Future<List<i7.Vocable>>.value(<i7.Vocable>[]))
      as i5.Future<List<i7.Vocable>>);
  @override
  i5.Future<List<int>> insertVocables(List<i7.Vocable>? vocables) =>
      (super.noSuchMethod(Invocation.method(#insertVocables, [vocables]),
          returnValue: Future<List<int>>.value(<int>[]))
      as i5.Future<List<int>>);
  @override
  i5.Future<void> updateVocable(i7.Vocable? vocable) =>
      (super.noSuchMethod(Invocation.method(#updateVocable, [vocable]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> updateVocables(List<i7.Vocable>? vocables) =>
      (super.noSuchMethod(Invocation.method(#updateVocables, [vocables]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteVocablesByLectureId(int? lectureId) => (super
      .noSuchMethod(Invocation.method(#deleteVocablesByLectureId, [lectureId]),
      returnValue: Future<void>.value(null),
      returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAllVocables() =>
      (super.noSuchMethod(Invocation.method(#deleteAllVocables, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAllVocablesByLangMedia(String? langMedia) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAllVocablesByLangMedia, [langMedia]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> resetAllVocableProgress() =>
      (super.noSuchMethod(Invocation.method(#resetAllVocableProgress, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<i3.File> downloadAbstract(i8.Abstract? abstract) =>
      (super.noSuchMethod(Invocation.method(#downloadAbstract, [abstract]),
          returnValue: Future<i3.File>.value(_FakeFile()))
      as i5.Future<i3.File>);
  @override
  i5.Future<List<i8.Abstract>> findAllAbstracts() =>
      (super.noSuchMethod(Invocation.method(#findAllAbstracts, []),
          returnValue: Future<List<i8.Abstract>>.value(<i8.Abstract>[]))
      as i5.Future<List<i8.Abstract>>);
  @override
  i5.Future<int> insertAbstract(i8.Abstract? abstract) =>
      (super.noSuchMethod(Invocation.method(#insertAbstract, [abstract]),
          returnValue: Future<int>.value(0)) as i5.Future<int>);
  @override
  i5.Future<void> updateAbstract(i8.Abstract? abstract) =>
      (super.noSuchMethod(Invocation.method(#updateAbstract, [abstract]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAbstract(i8.Abstract? abstract) =>
      (super.noSuchMethod(Invocation.method(#deleteAbstract, [abstract]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<i3.File> downloadCoding(i9.Coding? coding) =>
      (super.noSuchMethod(Invocation.method(#downloadCoding, [coding]),
          returnValue: Future<i3.File>.value(_FakeFile()))
      as i5.Future<i3.File>);
  @override
  i5.Future<List<i9.Coding>> findAllCodings() =>
      (super.noSuchMethod(Invocation.method(#findAllCodings, []),
          returnValue: Future<List<i9.Coding>>.value(<i9.Coding>[]))
      as i5.Future<List<i9.Coding>>);
  @override
  i5.Future<int> insertCoding(i9.Coding? coding) =>
      (super.noSuchMethod(Invocation.method(#insertCoding, [coding]),
          returnValue: Future<int>.value(0)) as i5.Future<int>);
  @override
  i5.Future<void> updateCoding(i9.Coding? coding) =>
      (super.noSuchMethod(Invocation.method(#updateCoding, [coding]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteCoding(i9.Coding? coding) =>
      (super.noSuchMethod(Invocation.method(#deleteCoding, [coding]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAllCoding() =>
      (super.noSuchMethod(Invocation.method(#deleteAllCoding, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<List<i9.CodingEntry>> findAllCodingEntries() =>
      (super.noSuchMethod(Invocation.method(#findAllCodingEntries, []),
          returnValue:
          Future<List<i9.CodingEntry>>.value(<i9.CodingEntry>[]))
      as i5.Future<List<i9.CodingEntry>>);
  @override
  i5.Future<List<i9.CodingEntry>> findAllCodingEntriesByCodingId(
      int? codingId) =>
      (super.noSuchMethod(
          Invocation.method(#findAllCodingEntriesByCodingId, [codingId]),
          returnValue:
          Future<List<i9.CodingEntry>>.value(<i9.CodingEntry>[]))
      as i5.Future<List<i9.CodingEntry>>);
  @override
  i5.Future<List<int>> insertCodingEntries(
      List<i9.CodingEntry>? codingEntries) =>
      (super.noSuchMethod(
          Invocation.method(#insertCodingEntries, [codingEntries]),
          returnValue: Future<List<int>>.value(<int>[]))
      as i5.Future<List<int>>);
  @override
  i5.Future<void> updateCodingEntry(i9.CodingEntry? codingEntry) =>
      (super.noSuchMethod(Invocation.method(#updateCodingEntry, [codingEntry]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteCodingEntriesByCodingId(int? codingId) =>
      (super.noSuchMethod(
          Invocation.method(#deleteCodingEntriesByCodingId, [codingId]),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
  @override
  i5.Future<void> deleteAllCodingEntries() =>
      (super.noSuchMethod(Invocation.method(#deleteAllCodingEntries, []),
          returnValue: Future<void>.value(null),
          returnValueForMissingStub: Future.value()) as i5.Future<void>);
}
